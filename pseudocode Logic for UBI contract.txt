Logic for UBI contract

ERC20 Beans
ERC721 BeanX
owned


!!!!!!!!!! use safemath for all math !!!!!!!!!!!!!!

!!!! see https://solidity.readthedocs.io/en/v0.4.24/common-patterns.html for details on send vs withdraw ... we will have to implement the withdraw pattern instead of send. 
 
 
 -----------------------Crappy-ass pseudocode follows


contract distribute_beans{

    mapping (uint => uint) ubiDate ; //key is the ERC721 tokenID, value is a date  
    mapping (address => uint) pendingWithdrawals;

    
    function UBI_distribute public (uint token){  
    
        if(beanx_address_of(token) == msg.sender){   //call to a non-extant interface to beans contract //FAKE CODE
        
            if (ubiDate[token] != 0){
                uint ubiamount = beans_balance(this_contract) / 1800days;

                if (ubiamount > 50) {
                    ubiamount = 50;
                }

                ubiBeans = (now - ubiDate) * ubiamount;  //all must be normalized to days!!!!! //FAKE CODE
                pendingWithdrawals[msg.sender] += ubiBeans;
          
                return message "beancoin distribution success " + ubibeans + " withdrawable for " + msg.sender; //FAKE CODE
                
            } else {
                ubiDate[token] = now;
                return message "beancoin UBI initialized " + now + " for beanx " + token; //FAKE CODE
            }

        } else {
            return message "BeanX token not found at address" +  msg.sender; //FAKE CODE
        }

    }


    function UBI_withdraw() public {
    
        uint amount = pendingWithdrawals[msg.sender];
        
        // Remember to zero the pending refund before
        // sending to prevent re-entrancy attacks
        
        pendingWithdrawals[msg.sender] = 0;
        
        transfer_beans(msg.sender, amount);    //call to a non-extant interface to beans contract //FAKE CODE
    }  
    
}
